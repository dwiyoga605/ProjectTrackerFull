{"version":3,"file":"select-option.js","sourceRoot":"","sources":["../../../../src/modules/select/components/select-option.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EACH,SAAS,EAAE,KAAK,EAAE,WAAW,EAAE,YAAY,EAAE,YAAY,EAAE,gBAAgB,EAC3E,SAAS,EAAE,SAAS,EAAE,UAAU,EAAE,MAAM,EAC3C,MAAM,eAAe,CAAC;AACvB,OAAO,EAAE,mBAAmB,EAAE,MAAM,gBAAgB,CAAC;AACrD,OAAO,EAAE,YAAY,EAAE,MAAM,oBAAoB,CAAC;AAiBlD,IAAa,eAAe;IAAY,mCAAmB;IA+BvD,yBAAY,QAAkB,EAAE,OAAkB;QAAlD;QACI,8FAA8F;QAC9F,qFAAqF;QACrF,kBAAM,QAAQ,EAAE,OAAO,CAAC,SAU3B;QARG,KAAI,CAAC,cAAc,GAAG,IAAI,CAAC;QAC3B,KAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;QACtB,KAAI,CAAC,UAAU,GAAG,IAAI,YAAY,EAAK,CAAC;QAExC,4HAA4H;QAC5H,KAAI,CAAC,SAAS,GAAG,UAAA,CAAC,IAAI,OAAA,EAAE,EAAF,CAAE,CAAC;QAEzB,KAAI,CAAC,YAAY,GAAG,KAAK,CAAC;;IAC9B,CAAC;IA3BD,sBAAW,sCAAS;aAApB,UAAqB,SAA2B;YAC5C,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;gBACrB,IAAI,CAAC,YAAY,GAAG,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC9C,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,IAAI,CAAC,YAAY,GAAG,SAAS,CAAC;YAClC,CAAC;QACL,CAAC;;;OAAA;IAwBM,iCAAO,GAAd,UAAe,CAAc;QAD7B,iBAKC;QAHG,CAAC,CAAC,YAAY,GAAG,IAAI,CAAC;QAEtB,UAAU,CAAC,cAAM,OAAA,KAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAI,CAAC,KAAK,CAAC,EAAhC,CAAgC,CAAC,CAAC;IACvD,CAAC;IACL,sBAAC;AAAD,CAAC,AApDD,CAAwC,mBAAmB,GAoD1D;AAjDG;IADC,WAAW,CAAC,YAAY,CAAC;;uDACK;AAG/B;IADC,KAAK,EAAE;;8CACO;AAIf;IADC,MAAM,EAAE;8BACS,YAAY;mDAAI;AAGlC;IADC,WAAW,CAAC,cAAc,CAAC;;iDACJ;AAgBxB;IADC,SAAS,CAAC,iBAAiB,EAAE,EAAE,IAAI,EAAE,gBAAgB,EAAE,CAAC;8BAClC,gBAAgB;wDAAC;AAkBxC;IADC,YAAY,CAAC,OAAO,EAAE,CAAC,QAAQ,CAAC,CAAC;;qCACjB,YAAY;;8CAI5B;AAnDQ,eAAe;IAP3B,SAAS,CAAC;QACP,QAAQ,EAAE,mBAAmB;QAC7B,QAAQ,EAAE,gFAGb;KACA,CAAC;qCAgCuB,SAAS,EAAU,UAAU;GA/BzC,eAAe,CAoD3B;SApDY,eAAe","sourcesContent":["import {\r\n    Component, Input, HostBinding, HostListener, EventEmitter, ViewContainerRef,\r\n    ViewChild, Renderer2, ElementRef, Output, ChangeDetectorRef\r\n} from \"@angular/core\";\r\nimport { SuiDropdownMenuItem } from \"../../dropdown\";\r\nimport { HandledEvent } from \"../../../misc/util\";\r\n\r\nexport interface ISelectRenderedOption<T> {\r\n    value:T;\r\n    isActive?:boolean;\r\n    formatter:(o:T) => string;\r\n    usesTemplate:boolean;\r\n    templateSibling:ViewContainerRef;\r\n}\r\n\r\n@Component({\r\n    selector: \"sui-select-option\",\r\n    template: `\r\n<span #templateSibling></span>\r\n<span [innerHTML]=\"renderedText\"></span>\r\n`\r\n})\r\nexport class SuiSelectOption<T> extends SuiDropdownMenuItem implements ISelectRenderedOption<T> {\r\n    // Sets the Semantic UI classes on the host element.\r\n    @HostBinding(\"class.item\")\r\n    private _optionClasses:boolean;\r\n\r\n    @Input()\r\n    public value:T;\r\n\r\n    // Fires when the option is selected, whether by clicking or by keyboard.\r\n    @Output()\r\n    public onSelected:EventEmitter<T>;\r\n\r\n    @HostBinding(\"class.active\")\r\n    public isActive:boolean;\r\n\r\n    public renderedText?:string;\r\n\r\n    public set formatter(formatter:(obj:T) => string) {\r\n        if (!this.usesTemplate) {\r\n            this.renderedText = formatter(this.value);\r\n        } else {\r\n            this.renderedText = undefined;\r\n        }\r\n    }\r\n\r\n    public usesTemplate:boolean;\r\n\r\n    // Placeholder to draw template beside.\r\n    @ViewChild(\"templateSibling\", { read: ViewContainerRef })\r\n    public templateSibling:ViewContainerRef;\r\n\r\n    constructor(renderer:Renderer2, element:ElementRef) {\r\n        // We inherit SuiDropdownMenuItem to automatically gain all keyboard navigation functionality.\r\n        // This is not done via adding the .item class because it isn't supported by Angular.\r\n        super(renderer, element);\r\n\r\n        this._optionClasses = true;\r\n        this.isActive = false;\r\n        this.onSelected = new EventEmitter<T>();\r\n\r\n        // By default we make this function return an empty string, for the brief moment when it isn't displaying the correct label.\r\n        this.formatter = o => \"\";\r\n\r\n        this.usesTemplate = false;\r\n    }\r\n\r\n    @HostListener(\"click\", [\"$event\"])\r\n    public onClick(e:HandledEvent):void {\r\n        e.eventHandled = true;\r\n\r\n        setTimeout(() => this.onSelected.emit(this.value));\r\n    }\r\n}\r\n"]}